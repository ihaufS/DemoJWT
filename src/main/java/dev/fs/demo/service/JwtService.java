package dev.fs.demo.service;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;

import java.security.Key;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

@Service
public class JwtService {

    private static final String SECRET_KEY = "664251503148786331564b564c61554b65586b357679484c6d5276414b36514e524a336f443231584537312b524f78556f514a426e5066614a624848515637334f62336165784762357054705331626444474a637942796453326c4e566976323174393849393953507a396e326465322f507153355255687974326b37736371547a45436b55504b65786a6876754a612b586434554c2f563259625838504f492b31506a70304246383830614862437858527a42716d324e5a3952767a596b357965366f734b356d7a78715077507844724d6d674b445a35797a4f4d3248306f74384f73684e5a3474314d504f746b4b763553705a4a48786c7a427963306b7570587844654b47445376464269416566576559746b594e38777a704e50626e532b5158384b50584763794463667179645261684849504c412b422f4d4933446b3967393073694b786a752f464e4b69302f4b725238533768596773516377482f412f52566a43497271517837526b356b5165504a4c6d2f7456376337696a753539756d2f763346617257523566716a6e4b796a7166304a37316d684a4a6d412f373463533445484d7a64726259794f5735382f6f5932554e4878445632594849335539485a317048586a6b72484747425a4370483255716557566d3335346a6b574b6b486f517a4c674a5064537470514d384f327a79586e67774a4863596669374231524a4467656f586b58413732597a6d364e6d65684433516c6144724d775878354d7070724638464679396c5662513179714b4a4f624d6359545a6661784f476d43615939335a344b394537654848654d4362364c48386b33654c4b377a416d38566536447a71742b625a574f54372b625a30796c43334d48355a726d36556d68694442634b714f58537448634e5a6e2b32776371557745683352577342735352315865624e4a5a594a354e436b307731683142616d5473686e413155464e36416e69632f50515632452b4d337732514a36536748444874643442594c4e4838537475596f54366b4c4341566352754c7365703157384850555a6d7a303665674f514b556e6257677a31453461726b784d5a51624b4d5332592b497341447a595839654f4b546a474e4778614d6a4936315865674e324d4a387568526443454d77384f584c4f4b524a79506a492f416452496262554f4567504c765930596a52384d4b3051737364482b6367597150744e6b374c704331706447416d4c554b4b706a6b3456307655352f624a305a564f4a2f42397575535a593155336344586b697a377a336959596546686b527634766a4b385352506957503972306b544f4f4f3447785849546b3631453731744b34584f4e3073523673617536662f516c366145753544453544554f2f6764482f7466435868417a6876682f5853632f39785a315a4859755637676c3276372f63434c416f6478366f66303472613143373365566d393375644d556e785235376f686c396e7a754c62315054676c6d612f53676955627a48454f78374b786444585566555167636a45563370495232316e534875364d4a6939355a6e7973627a544676646a4f422f7a5753316a572f796f4c65645539383847366b793142676b666d35316a5138793957413543775a6c776d4752503647383037394c69536878326b6c7a7741536b565158576d414b6a79516a753275426476563074673869796365744a6e724251714763724f6a7631577762734359315432766b49454f79675350497248646665706a5259556d4170706c7455707269702f47705470694230734d672f59562f3358622b346b4354486c54497275326a4838545678306463514b5746355065424a5066515166373857335a594e63744d62574b4f394f4578524d5872356854314f61555477436678704273703932344e3143455871722f68684f6d5871646b3139522f4d4a4f4833646d5777416f455a4166697a5933554d7974684a306f4e2f306c2b3546714875647559314675616d625263702b676b4a6b6844315a79525268546a66374c50777a306f794a61514577327265487a5377706d4231646a61724f516437426c482b38704d737075534c775749616b457343596861377139376d6f516e546f4e486d49416f667475324b70335a42455458747057597a37622b3249367246415164622f426d5941356d67304877722f6b4a512f6e51553766426568575264784550486e6d65707242687a2b5a585947664b2b71715178395832546e4b61656c35736c56316264433474434d5871734a41324274327a556b634e6237444659627869465639386869364c6e48635739556c4b436d4f32512f4d546337423836656d7753586b4a2b66483554472b3473644752392f37395845504a4434517154515371346e324d75476754486d35346a754d2f4e65355943626f6d354a75574a39764f65433971516953416b74416238476f4d694c2f32353750776b366477314166576a41484a396c61767865554c79344d5a5842302b62596b454b5366624c675744484e6c6e4439646b36684831314c722f34796b4d3130526b333330734b6837594b6374446a4d79575848486e574f465a6872414a79457078654c7a4e49504833786155525978783333464f695451614b456464777a2f39417154374a447a6e724a6d727154446837545441322f46432b444141635471416d33747a56584a57304a44524b2f724a636a3333374364454e735a58583769752f6a444b704d4f42736f6a4130317770476b3345335871364d6a3741624c645762645572516b544c50466869666f506a5265414858724475587775504f36714f654142454965784f42467055615a325075616742583976667232357a363653674549525962395269365044373051597a2b566c714f454d676869455761386f3559377a63763748784f547066384f3262576976322f2f677771334b4e486545717344384a37432f6958514253675574443677436e4665716a54752f46306c7a5169717979336939757969524d585234734a577872735969336e7a7a43514877794e385746596159483456514132315875326f342b77564c594d524b693871632f635730335733696167526c69674a5855306b5839416d3945614d6c69775a466348514865425841547635365839334539527156395644714a5965775459486f4c767a72745874444558586a316c626b78433779567665512b69327531775048325a4b7763376b365a44594271624f58313951335042395a456150744b5779796f507342342f6475724e73576d414f5a384f6f6f5165444f64527265766534564d54496c447132545864466a71384a45303157314f45346f77564a4d416b4b6c725331556356304c2b4443683661336b4748625a6b7874484d50486a587056513752615a487948464a52716865634a396646705136556272613170697044614e4a56436b735659636b4166496c4834316c325a427759336546533051354f66792f5531705163634a754b3469755231485a4b6951486875386f5554693933535850474f634f626655572f312b4c754541713245795977474a43572f387a794e636b75734f6e324246532f6549463335494e506f2b357037396c412f516a6d786b737642725054304a35496b6550617033563265463042537236426c4759464353644c7564685a34576742424f465a35754f3551584230446659556d712b304156764272313355666f71644d35456d302b43385573305566503763467879394d724b5937534c43533442355841644572656b717767764a51626a2b5136444a516630414243677666396d444936a";

    public String extractUsername(String token) {
        return extractClaim(token, Claims::getSubject);
    }

    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
        final Claims claims = extractAllClaims(token);
        return claimsResolver.apply(claims);
    }

    public String generateToken(UserDetails userDetails) {
        return generateToken(new HashMap<>(), userDetails);
    }

    public boolean isTokenValid(String token, UserDetails userDetails) {
        final String username = extractUsername(token);
        return username.equals(userDetails.getUsername()) && !isTokenExpired(token);
    }

    private boolean isTokenExpired(String token) {
        return extractExpiration(token).before(new Date());
    }

    private Date extractExpiration(String token) {
        return extractClaim(token, Claims::getExpiration);
    }

    public String generateToken(Map<String, Object> extraClaims, UserDetails userDetails) {
        return Jwts
                .builder()
                .setClaims(extraClaims)
                .setSubject(userDetails.getUsername())
                .setIssuedAt(new Date(System.currentTimeMillis()))
                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 24))
                .signWith(getSigningKey(), SignatureAlgorithm.HS256)
                .compact();

    }


    private Claims extractAllClaims(String token) {
        return Jwts
                .parserBuilder()
                .setSigningKey(getSigningKey())
                .build()
                .parseClaimsJws(token)
                .getBody();
    }

    private Key getSigningKey() {
        byte[] keyBytes = Decoders.BASE64.decode(SECRET_KEY);
        return Keys.hmacShaKeyFor(keyBytes);
    }
}
